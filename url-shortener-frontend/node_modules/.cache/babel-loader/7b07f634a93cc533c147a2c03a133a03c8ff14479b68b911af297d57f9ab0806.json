{"ast":null,"code":"// src/logger.js\n\nrequire(\"dotenv\").config();\nconst axios = require(\"axios\");\nconst getToken = require(\"./auth\"); // Import the getToken function from auth.js\n\n// Define the API endpoint for creating logs\nconst LOG_API_URL = \"http://20.244.56.144/evaluation-service/log\";\n\n/**\r\n * A reusable function to send a log message to the evaluation server.\r\n * It automatically handles fetching the authentication token.\r\n *\r\n * @param {string} stack - The stack (\"backend\" or \"frontend\").\r\n * @param {string} level - The log level (\"info\", \"warn\", \"error\", etc.).\r\n * @param {string} pkg - The package where the log originates from (e.g., \"handler\", \"db\").\r\n * @param {string} message - The detailed log message.\r\n */\nasync function Log(stack, level, pkg, message) {\n  try {\n    // 1. Get the authentication token first\n    const token = await getToken();\n\n    // If we don't get a token, we can't send the log\n    if (!token) {\n      console.error(\"❌ Could not obtain auth token. Log will not be sent.\");\n      return;\n    }\n\n    // 2. Prepare the request body for the log API\n    // Note: The API expects the field to be named \"package\", so we map 'pkg' to 'package'.\n    const logData = {\n      stack: stack,\n      level: level,\n      package: pkg,\n      message: message\n    };\n\n    // 3. Make the authenticated POST request to the logging API\n    const response = await axios.post(LOG_API_URL, logData, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Log the success response from the server for confirmation\n    console.log(\"✅ Log sent successfully:\", response.data);\n  } catch (err) {\n    var _err$response;\n    // Log any errors that occur during the process\n    console.error(\"❌ Error sending log:\", ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n  }\n}\n\n// Export the Log function to be used in other files\n_c = Log;\nmodule.exports = {\n  Log\n};\nvar _c;\n$RefreshReg$(_c, \"Log\");","map":{"version":3,"names":["require","config","axios","getToken","LOG_API_URL","Log","stack","level","pkg","message","token","console","error","logData","package","response","post","headers","log","data","err","_err$response","_c","module","exports","$RefreshReg$"],"sources":["D:/Repos/2294019/url-shortener-frontend/src/logging-middleware/logger.js"],"sourcesContent":["// src/logger.js\r\n\r\nrequire(\"dotenv\").config();\r\nconst axios = require(\"axios\");\r\nconst getToken = require(\"./auth\"); // Import the getToken function from auth.js\r\n\r\n// Define the API endpoint for creating logs\r\nconst LOG_API_URL = \"http://20.244.56.144/evaluation-service/log\";\r\n\r\n/**\r\n * A reusable function to send a log message to the evaluation server.\r\n * It automatically handles fetching the authentication token.\r\n *\r\n * @param {string} stack - The stack (\"backend\" or \"frontend\").\r\n * @param {string} level - The log level (\"info\", \"warn\", \"error\", etc.).\r\n * @param {string} pkg - The package where the log originates from (e.g., \"handler\", \"db\").\r\n * @param {string} message - The detailed log message.\r\n */\r\nasync function Log(stack, level, pkg, message) {\r\n  try {\r\n    // 1. Get the authentication token first\r\n    const token = await getToken();\r\n\r\n    // If we don't get a token, we can't send the log\r\n    if (!token) {\r\n      console.error(\"❌ Could not obtain auth token. Log will not be sent.\");\r\n      return;\r\n    }\r\n\r\n    // 2. Prepare the request body for the log API\r\n    // Note: The API expects the field to be named \"package\", so we map 'pkg' to 'package'.\r\n    const logData = {\r\n      stack: stack,\r\n      level: level,\r\n      package: pkg,\r\n      message: message,\r\n    };\r\n\r\n    // 3. Make the authenticated POST request to the logging API\r\n    const response = await axios.post(LOG_API_URL, logData, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n    });\r\n\r\n    // Log the success response from the server for confirmation\r\n    console.log(\"✅ Log sent successfully:\", response.data);\r\n\r\n  } catch (err) {\r\n    // Log any errors that occur during the process\r\n    console.error(\"❌ Error sending log:\", err.response?.data || err.message);\r\n  }\r\n}\r\n\r\n// Export the Log function to be used in other files\r\nmodule.exports = { Log };"],"mappings":"AAAA;;AAEAA,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,CAAC,CAAC;AAC1B,MAAMC,KAAK,GAAGF,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAMG,QAAQ,GAAGH,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;;AAEpC;AACA,MAAMI,WAAW,GAAG,6CAA6C;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,GAAGA,CAACC,KAAK,EAAEC,KAAK,EAAEC,GAAG,EAAEC,OAAO,EAAE;EAC7C,IAAI;IACF;IACA,MAAMC,KAAK,GAAG,MAAMP,QAAQ,CAAC,CAAC;;IAE9B;IACA,IAAI,CAACO,KAAK,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,sDAAsD,CAAC;MACrE;IACF;;IAEA;IACA;IACA,MAAMC,OAAO,GAAG;MACdP,KAAK,EAAEA,KAAK;MACZC,KAAK,EAAEA,KAAK;MACZO,OAAO,EAAEN,GAAG;MACZC,OAAO,EAAEA;IACX,CAAC;;IAED;IACA,MAAMM,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAACZ,WAAW,EAAES,OAAO,EAAE;MACtDI,OAAO,EAAE;QACP,eAAe,EAAE,UAAUP,KAAK,EAAE;QAClC,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;;IAEF;IACAC,OAAO,CAACO,GAAG,CAAC,0BAA0B,EAAEH,QAAQ,CAACI,IAAI,CAAC;EAExD,CAAC,CAAC,OAAOC,GAAG,EAAE;IAAA,IAAAC,aAAA;IACZ;IACAV,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAE,EAAAS,aAAA,GAAAD,GAAG,CAACL,QAAQ,cAAAM,aAAA,uBAAZA,aAAA,CAAcF,IAAI,KAAIC,GAAG,CAACX,OAAO,CAAC;EAC1E;AACF;;AAEA;AAAAa,EAAA,GArCejB,GAAG;AAsClBkB,MAAM,CAACC,OAAO,GAAG;EAAEnB;AAAI,CAAC;AAAC,IAAAiB,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}